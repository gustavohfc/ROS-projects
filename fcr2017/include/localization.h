#ifndef LOCALIZATION_H
#define LOCALIZATION_H

#include <ros/ros.h>

#include "feature.h"


// Probability to chande node
const double P_action[18][18] =
/*FROM      TO*/    /* A */    /* B */  /* C */ /* D */ /* E */ /* F */ /* G */ /* H */ /* I */ /* J */ /* K */ /* L */ /* M */ /* N */ /* O */ /* P */ /* Q */ /* R */
/* A */            {{0.55,      0.2,    0.01,   0.2,    0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01},
/* B */             {0.2,       0.55,   0.2,    0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01},
/* C */             {0.01,      0.2,    0.55,   0.01,   0.2,    0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01},
/* D */             {0.2,       0.01,   0.01,   0.55,   0.01,   0.2,    0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01},
/* E */             {0.01,      0.01,   0.2,    0.01,   0.55,   0.01,   0.01,   0.2,    0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01},
/* F */             {0.01,      0.01,    0.01,  0.1,    0.01,   0.56,   0.1,    0.01,   0.1,    0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01},
/* G */             {0.01,      0.01,    0.01,  0.01,   0.01,   0.2,    0.55,   0.2,    0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01},
/* H */             {0.01,      0.01,    0.01,  0.01,   0.1,    0.01,   0.1,    0.56,   0.01,   0.1,    0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01},
/* I */             {0.01,      0.01,    0.01,  0.01,   0.01,   0.2,    0.01,   0.01,   0.55,   0.01,   0.2,    0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01},
/* J */             {0.01,      0.01,    0.01,  0.01,   0.01,   0.01,   0.01,   0.2,    0.01,   0.55,   0.01,   0.01,   0.2,    0.01,   0.01,   0.01,   0.01,   0.01},
/* K */             {0.01,      0.01,    0.01,  0.01,   0.01,   0.01,   0.01,   0.01,   0.1,    0.01,   0.56,   0.1,    0.01,   0.1,    0.01,   0.01,   0.01,   0.01},
/* L */             {0.01,      0.01,    0.01,  0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.2,    0.55,   0.2,    0.01,   0.01,   0.01,   0.01,   0.01},
/* M */             {0.01,      0.01,    0.01,  0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.1,    0.01,   0.1,    0.56,   0.01,   0.1,    0.01,   0.01,   0.01},
/* N */             {0.01,      0.01,    0.01,  0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.2,    0.01,   0.01,   0.55,   0.01,   0.2,    0.01,   0.01},
/* O */             {0.01,      0.01,    0.01,  0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.2,    0.01,   0.55,   0.01,   0.01,   0.2},
/* P */             {0.01,      0.01,    0.01,  0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.2,    0.01,   0.55,   0.2,    0.01},
/* Q */             {0.01,      0.01,    0.01,  0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.2,    0.55,   0.2},
/* R */             {0.01,      0.01,    0.01,  0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.01,   0.2,    0.01,   0.2,    0.55}};

                                    /* A */ /* B */ /* C */ /* D */ /* E */ /* F */ /* G */ /* H */ /* I */ /* J */ /* K */ /* L */ /* M */ /* N */ /* O */ /* P */ /* Q */ /* R */
const double corridor_width[18] =   {0,     3.5524, 0,      3.0787, 3.0826, 0,      3.1090, 0,      3.0787, 3.0826, 0,      7.4321, 0,      3.0787, 3.0826, 0,      2.5762, 0};
const int internal_corners[18] =    {1,     0,      1,      0,      0,      2,      0,      2,      0,      0,      2,      0,      2,      0,      0,      1,      0,      1};
const int external_corners[18] =    {1,     0,      1,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      1,      0,      1};;

class Localization
{
private:
    ros::Publisher pub_probabilities;
    Feature& features;

    std::vector<double> P_S;

public:
    Localization(ros::NodeHandle& nodeHandle, Feature& _features);
    
    void resetProbabilities();
    void update();
    void normalise();
    void show();
    double getP_feature(int node);
    void send_data();
};

#endif
